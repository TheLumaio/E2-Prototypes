* Fantasy console / programmable processor thing

** Ideas
    Processor loads from a compiled binary.
    Some kind of assembly like language.
    "Processor" should initialize just like a real one.
    Console/text/graphics output can be handled by and external virtual
    video handler chip.

** Chip-8
   
*** Instructions
**** DONE 00E0 - CLS
     CLOSED: [2021-07-08 Thu 02:39]
    Clear the display.
    
**** DONE 00EE - RET
     CLOSED: [2021-07-08 Thu 02:40]
    Return from a subroutine.
    
    The interpreter sets the program counter to the address at the top of the stack, then subtracts 1 from the stack pointer.
    
**** DONE 1nnn - JP addr
     CLOSED: [2021-07-08 Thu 02:41]
    Jump to location nnn.
    
    The interpreter sets the program counter to nnn.
    
**** DONE 2nnn - CALL addr
     CLOSED: [2021-07-08 Thu 02:44]
    Call subroutine at nnn.
    
    The interpreter increments the stack pointer, then puts the current PC on the top of the stack. The PC is then set to nnn.
    
**** DONE 3xkk - SE Vx, byte
     CLOSED: [2021-07-08 Thu 02:48]
    Skip next instruction if Vx = kk.
    
    The interpreter compares register Vx to kk, and if they are equal, increments the program counter by 2.
    
**** DONE 4xkk - SNE Vx, byte
     CLOSED: [2021-07-08 Thu 02:48]
    Skip next instruction if Vx != kk.
    
    The interpreter compares register Vx to kk, and if they are not equal, increments the program counter by 2.
    
**** DONE 5xy0 - SE Vx, Vy
     CLOSED: [2021-07-08 Thu 02:49]
    Skip next instruction if Vx = Vy.
    
    The interpreter compares register Vx to register Vy, and if they are equal, increments the program counter by 2.
    
**** DONE 6xkk - LD Vx, byte
     CLOSED: [2021-07-08 Thu 02:51]
    Set Vx = kk.
    
    The interpreter puts the value kk into register Vx.
    
**** DONE 7xkk - ADD Vx, byte
     CLOSED: [2021-07-08 Thu 02:54]
    Set Vx = Vx + kk.
    
    Adds the value kk to the value of register Vx, then stores the result in Vx.
    
**** DONE 8xy0 - LD Vx, Vy
     CLOSED: [2021-07-08 Thu 02:58]
    Set Vx = Vy.
    
    Stores the value of register Vy in register Vx.
    
**** DONE 8xy1 - OR Vx, Vy
     CLOSED: [2021-07-08 Thu 02:58]
    Set Vx = Vx OR Vy.
    
    Performs a bitwise OR on the values of Vx and Vy, then stores the result in Vx. A bitwise OR compares the corrseponding bits from two values, and if either bit is 1, then the same bit in the result is also 1. Otherwise, it is 0.
    
**** DONE 8xy2 - AND Vx, Vy
     CLOSED: [2021-07-08 Thu 02:58]
    Set Vx = Vx AND Vy.
    
    Performs a bitwise AND on the values of Vx and Vy, then stores the result in Vx. A bitwise AND compares the corrseponding bits from two values, and if both bits are 1, then the same bit in the result is also 1. Otherwise, it is 0.
    
**** DONE 8xy3 - XOR Vx, Vy
     CLOSED: [2021-07-08 Thu 02:58]
    Set Vx = Vx XOR Vy.
    
    Performs a bitwise exclusive OR on the values of Vx and Vy, then stores the result in Vx. An exclusive OR compares the corrseponding bits from two values, and if the bits are not both the same, then the corresponding bit in the result is set to 1. Otherwise, it is 0.
    
**** DONE 8xy4 - ADD Vx, Vy
     CLOSED: [2021-07-08 Thu 06:02]
    Set Vx = Vx + Vy, set VF = carry.
    
    The values of Vx and Vy are added together. If the result is greater than 8 bits (i.e., > 255,) VF is set to 1, otherwise 0. Only the lowest 8 bits of the result are kept, and stored in Vx.
    
**** DONE 8xy5 - SUB Vx, Vy
     CLOSED: [2021-07-08 Thu 06:21]
     Set Vx = Vx - Vy, set VF = NOT borrow.
     
     If Vx > Vy, then VF is set to 1, otherwise 0. Then Vy is subtracted from Vx, and the results stored in Vx.
    
**** DONE 8xy6 - SHR Vx {, Vy}
     CLOSED: [2021-07-08 Thu 06:21]
     Set Vx = Vx SHR 1.
    
     If the least-significant bit of Vx is 1, then VF is set to 1, otherwise 0. Then Vx is divided by 2.
     
**** DONE 8xy7 - SUBN Vx, Vy
     CLOSED: [2021-07-08 Thu 06:21]
     Set Vx = Vy - Vx, set VF = NOT borrow.
     
     If Vy > Vx, then VF is set to 1, otherwise 0. Then Vx is subtracted from Vy, and the results stored in Vx.
    
**** DONE 8xyE - SHL Vx {, Vy}
     CLOSED: [2021-07-08 Thu 06:21]
    Set Vx = Vx SHL 1.
    
    If the most-significant bit of Vx is 1, then VF is set to 1, otherwise to 0. Then Vx is multiplied by 2.
    
**** DONE 9xy0 - SNE Vx, Vy
     CLOSED: [2021-07-08 Thu 06:21]
    Skip next instruction if Vx != Vy.
    
    The values of Vx and Vy are compared, and if they are not equal, the program counter is increased by 2.
    
**** DONE Annn - LD I, addr
     CLOSED: [2021-07-08 Thu 06:26]
    Set I = nnn.
    
    The value of register I is set to nnn.
    
**** DONE Bnnn - JP V0, addr
     CLOSED: [2021-07-08 Thu 06:26]
    Jump to location nnn + V0.
    
    The program counter is set to nnn plus the value of V0.
    
**** DONE Cxkk - RND Vx, byte
     CLOSED: [2021-07-08 Thu 06:26]
    Set Vx = random byte AND kk.
    
    The interpreter generates a random number from 0 to 255,
    which is then ANDed with the value kk.

    The results are stored in Vx.
    See instruction 8xy2 for more information on AND.
    
**** DONE Dxyn - DRW Vx, Vy, nibble
     CLOSED: [2021-07-08 Thu 21:43]
    Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision.
    
    The interpreter reads n bytes from memory, starting at the address stored in I.
    These bytes are then displayed as sprites on screen at coordinates (Vx, Vy).
    Sprites are XORed onto the existing screen.
    If this causes any pixels to be erased, VF is set to 1, otherwise it is set to 0.
    
    If the sprite is positioned so part of it is outside the coordinates of the display,
    it wraps around to the opposite side of the screen.
    
    See instruction 8xy3 for more information on XOR, and section 2.4, Display,
    for more information on the Chip-8 screen and sprites.
    
**** DONE Ex9E - SKP Vx
     CLOSED: [2021-07-15 Thu 03:33]
    Skip next instruction if key with the value of Vx is pressed.
    
    Checks the keyboard,
    and if the key corresponding to the value of Vx is currently in the down position,
    PC is increased by 2.
    
**** DONE ExA1 - SKNP Vx
     CLOSED: [2021-07-15 Thu 03:33]
    Skip next instruction if key with the value of Vx is not pressed.
    
    Checks the keyboard,
    and if the key corresponding to the value of Vx is currently in the up position,
    PC is increased by 2.
    
**** DONE Fx07 - LD Vx, DT
     CLOSED: [2021-07-15 Thu 03:48]
    Set Vx = delay timer value.
    
    The value of DT is placed into Vx.
    
**** DONE Fx0A - LD Vx, K
     CLOSED: [2021-07-15 Thu 03:48]
    Wait for a key press, store the value of the key in Vx.
    
    All execution stops until a key is pressed, then the value of that key is stored in Vx.
    
**** DONE Fx15 - LD DT, Vx
     CLOSED: [2021-07-15 Thu 03:48]
    Set delay timer = Vx.
    
    DT is set equal to the value of Vx.
    
**** DONE Fx18 - LD ST, Vx
     CLOSED: [2021-07-15 Thu 03:48]
    Set sound timer = Vx.
    
    ST is set equal to the value of Vx.
    
**** DONE Fx1E - ADD I, Vx
     CLOSED: [2021-07-15 Thu 03:48]
    Set I = I + Vx.
    
    The values of I and Vx are added, and the results are stored in I.
    
**** DONE Fx29 - LD F, Vx
     CLOSED: [2021-07-15 Thu 04:00]
    Set I = location of sprite for digit Vx.
    
    The value of I is set to the location for the hexadecimal sprite
    corresponding to the value of Vx.

    See section 2.4, Display, for more information on the Chip-8 hexadecimal font.
    
**** DONE Fx33 - LD B, Vx
     CLOSED: [2021-07-15 Thu 04:00]
    Store BCD representation of Vx in memory locations I, I+1, and I+2.
    
    The interpreter takes the decimal value of Vx,
    and places the hundreds digit in memory at location in I,
    the tens digit at location I+1, and the ones digit at location I+2.
    
**** DONE Fx55 - LD [I], Vx
     CLOSED: [2021-07-15 Thu 04:00]
    Store registers V0 through Vx in memory starting at location I.
    
    The interpreter copies the values of registers V0 through Vx into memory, starting at the address in I.

**** DONE Fx65 - LD Vx, [I]
     CLOSED: [2021-07-15 Thu 04:00]
    Read registers V0 through Vx from memory starting at location I.
    
    The interpreter reads values from memory starting at location I into registers V0 through Vx.
    

** 6502 Notes
   0x7ffc & 0x7ffd are the rom start location bytes.


** Tasks

** Bugs
